#include <iostream>
#include <boost/random.hpp>
#include <boost_learn.h>
#include <dynamic_hedge.h>
#include <bisection.h>
#include <boost/date_time.hpp>
#include <cstring>
#include <fstream>

using namespace std;
using namespace boost::gregorian; // compile with linker option as g++ computeBusinessDays.cpp -l boost_date_time

// this function computes the number of business days between start and end dates
long dateDifference( string start_date, string end_date )
{
    date _start_date(from_simple_string(start_date));
    date _end_date(from_simple_string(end_date));

    // counter for weekdays
    int count=0;
    for(day_iterator iter = _start_date; iter!=_end_date; ++iter)
    {
        // increment counter if it's no saturday and no sunday
        if(    iter->day_of_week() !=  boost::date_time::Saturday
            && iter->day_of_week() !=  boost::date_time::Sunday)
            ++count;
    }
    return count;
}

int main() {

    //------------------- Q1 -----------------
    // dynamic_hedge test1(100,0.4,0.05,0.24,0.025,10,1234);
    // vector<double> r1;
    // test1.spot_path();
    // test1.option_path(105);
    // test1.hedging_error();
    // test1.pnl_path();

    // vector<double> t1_pnl = test1.get_path("pnl");
    // vector<double> t1_pnl_hedge = test1.get_path("pnl_hedge");
    
    // cout<<"\npnl:";
    // for(int i =0;i<t1_pnl.size();i++){
    //     cout<<t1_pnl[i]<<" ";
    // }

    // cout<<"\npnl_hedge:";
    // for(int i =0;i<t1_pnl.size();i++){
    //     cout<<t1_pnl_hedge[i]<<" ";
    // }

    // bisection t1(100,105,0.025,0.4,4.39167);
    // double sigma = t1.find_root(0,1);
    // cout << "sigma is : "<<sigma<<endl;
    
    //------------------- Q2 -----------------
  

    // step 1: input t0_date, tN_date, T_date, K && calculate N & T : 
    string t0_date, tN_date, T_date;
    double K, N, T;
    // cout << "Enter start date" << endl;
    // cin >> t0_date;
    // cout << "Enter end date" << endl;
    // cin >> tN_date;
    // cout << "Enter expiration date" << endl;
    // cin >> T_date;
    // cout << "Enter strike price" << endl;
    // cin >> K;

    t0_date = "2011-07-05";
    tN_date = "2011-07-29";
    T_date = "2011-09-17";
    K = 500;
    N = double(dateDifference(t0_date,tN_date)+1);
    T = double(dateDifference(t0_date,T_date))/252;
    cout << "t0 is: "<<t0_date<<" tN is: "<<tN_date<<" T is: "<<T_date
        <<" K is: "<<K<<" N is: "<<N<<" T is: "<<T<<endl;

    // step 2: import interest.csv op_GOOG.csv sec_GOOG.csv 
    vector<string> date_path;   //date path
    vector<double> path;        //spot path
    vector<double> v_path;      //option price path
    vector<double> r_path;      //interest path
    
    ifstream i1("./data/sec_GOOG.csv");
    ifstream i2("./data/interest.csv");
    string temp1,temp2;
    while(getline(i1,temp1) && getline(i2,temp2)){
        if (temp1<="9"&&temp1>="0"){
            int startLoc = temp1.rfind(",");
            string ytm_str = temp1.substr(0,startLoc);
            
            string s_str = temp1.substr(startLoc+1);
            double s_ = atof(s_str.c_str());
            
            string r_str = temp2.substr(startLoc+1);
            double r_ = atof(r_str.c_str())/100;

            if (ytm_str >= t0_date && ytm_str <= tN_date){
                date_path.push_back(ytm_str);
                path.push_back(s_);
                r_path.push_back(r_);
                // cout<<ytm_str<<" "<<s_<<" "<<r_<<endl;
            }
        }
    }

    ifstream i3("./data/op_GOOG.csv");
    vector <string> row;
    string temp3,word;

    while (getline(i3,temp3)){
        row.clear();
        stringstream s(temp3);
        if (temp1<="9"&&temp1>="0"){
            while(getline(s,word,',')){
                row.push_back(word);
            }    
            // cout<<"pass"<<endl;
            if (row[0] >= t0_date && row[0] <= tN_date && row[1] == T_date && row[2] == "C"&& stod(row[3]) == K){
                double v_ = (stod(row[4]) + stod(row[5]))/2;
                // cout<<row[0]<<" "<<row[1]<<" "<<row[3]<<endl;
                v_path.push_back(v_);
            }
        }
    }

    // step 3: calculate sigma
    vector<double> s_path;       //sigma path
    for(int i = 0;i<N;i++){
        bisection bis(path[i],K,r_path[i],T - double(i)/252,v_path[i]);
        double sigma = bis.find_root(0,1);
        // cout << "sigma is : "<<sigma<<endl;
        s_path.push_back(sigma);
    }


    // step 4: run delta_hedge
    // dynamic_hedge goog(100,T,0.05,0.24,0.025,N-1,1234);  // only T and N-1 matter
    // goog.set_K(K);
    dynamic_hedge goog(T,K,N-1);
    goog.set_path("spot",path);
    goog.set_path("option",v_path);
    goog.set_path("rate",r_path);
    goog.set_path("sigma",s_path);
    goog.hedging_error();
    cout<<" \n";
    goog.pnl_path();
    
    vector<double> d_path = goog.get_path("delta"); 
    vector<double> e_path = goog.get_path("hedging_error");
    vector<double> pnl = goog.get_path("pnl");
    vector<double> pnl_hedge = goog.get_path("pnl_hedge");

    // step 5: output result.csv
    fstream fout;
    fout.open("./data/result.csv",ios::out|ios::app);
    fout<<"date, "<<"spot price, "<<"option price, "<<"sigma, "<< "delta, "<<"hedging error, "
        <<"pnl, "<<"pnl hedge"<<endl;

    cout<<"\n result: \n";
    for(int i =0;i<N;i++){
        cout<<date_path[i]<<" ";
        cout<<path[i]<<" ";
        cout<<v_path[i]<<" ";
        cout<<r_path[i]<<" ";
        cout<<s_path[i]<<" ";
        cout<<d_path[i]<<" ";
        cout<<e_path[i]<<" ";
        cout<<pnl[i]<<" ";
        cout<<pnl_hedge[i]<<endl;

        fout<<date_path[i]<<", ";
        fout<<path[i]<<", ";
        fout<<v_path[i]<<", ";
        fout<<s_path[i]<<", ";
        fout<<d_path[i]<<", ";
        fout<<e_path[i]<<", ";
        fout<<pnl[i]<<", ";
        fout<<pnl_hedge[i]<<endl;
    }
}